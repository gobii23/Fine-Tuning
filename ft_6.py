# -*- coding: utf-8 -*-
"""FT-6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b9kR_fMdxat-7K4soJLwvBNYBKN55wrY
"""

!pip install transformers datasets evaluate accelerate peft bitsandbytes

import transformers, peft, datasets
  from datasets import load_dataset
  from transformers import GPT2Tokenizer, Trainer, TrainingArguments, DataCollatorWithPadding, AutoModelForSequenceClassification, BitsAndBytesConfig
  from peft import LoraConfig, get_peft_model
  import pandas as pd

dataset = load_dataset("mteb/tweet_sentiment_extraction")

df = pd.DataFrame(dataset["train"])
df

from transformers import GPT2Tokenizer
tokenizer = GPT2Tokenizer.from_pretrained("gpt2")
tokenizer.pad_token = tokenizer.eos_token

def token_fun(example):
  return tokenizer(example["text"], padding="max_length", truncation=True, max_length = 128)

tokenized_dataset = dataset.map(token_fun, batched=True)

# tokenized_dataset = tokenized_dataset.rename_column("label", "labels")
tokenized_dataset.set_format(type="torch", columns=["input_ids", "attention_mask", "labels"])

small_train_dataset = tokenized_dataset["train"].shuffle(seed=42).select(range(1000))
small_eval_dataset = tokenized_dataset["test"].shuffle(seed=42).select(range(500))

model_name = "facebook/opt-1.3b"
bnb_config = BitsAndBytesConfig(load_in_8bit=True)
model = AutoModelForSequenceClassification.from_pretrained(model_name,
                                                           quantization_config=bnb_config,
                                                           num_labels=3,                                                           device_map="auto")

from peft import TaskType

lora_config = LoraConfig(
    r=8,
    lora_alpha=16,
    target_modules=["q_proj","v_proj"],
    lora_dropout=0.05,
    bias="none",
    task_type=TaskType.SEQ_CLS,
    modules_to_save=["score"]
)

model = get_peft_model(model, lora_config)
model.print_trainable_parameters()

data_collator = DataCollatorWithPadding(tokenizer=tokenizer)

training_args = TrainingArguments(
    output_dir="./results",
    logging_dir="./results/logs",
    per_device_train_batch_size=1,
    per_device_eval_batch_size=1,
    learning_rate=2e-5,
    logging_steps=10,
    save_strategy="steps",
    eval_strategy="steps",
    num_train_epochs=2,
    save_steps=50,
    eval_steps=50,
    report_to="none",
    fp16=False,
    gradient_accumulation_steps=8
)

import evaluate
import numpy as np

metric=evaluate.load("accuracy")

def compute_metrics(eval_pred):
  logits, labels = eval_pred
  predictions = np.argmax(logits, axis=-1)
  return metric.compute(predictions=predictions, references=labels)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=small_train_dataset,
    eval_dataset=small_eval_dataset,
    processing_class=tokenizer,
    data_collator=data_collator,
    compute_metrics=compute_metrics
)

trainer.train()

